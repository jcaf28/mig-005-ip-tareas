Option Compare Database
Option Explicit

'-------------------------------------------------
'  Rutina genérica para limpiar tablas *_OLD
'-------------------------------------------------
Private Sub EliminarTablasOld(db As DAO.Database)
    Dim rst As DAO.Recordset
    Dim sql As String
    
    sql = "SELECT Name " & _
          "FROM MSysObjects " & _
          "WHERE Type=1 " & _
          "  AND Name Like '*_OLD' " & _
          "  AND Name NOT LIKE 'MSys*';"
    
    Set rst = db.OpenRecordset(sql)
    Do While Not rst.EOF
        db.Execute "DROP TABLE [" & rst!Name & "]", dbFailOnError
        rst.MoveNext
    Loop
    rst.Close
    Set rst = Nothing
End Sub

'-------------------------------------------------
'  MIG-003 – Depuración de usuarios y relación RI
'-------------------------------------------------
Public Sub MigracionUsuariosAnotaciones()
    
    Const REL_NAME As String = "rel_USUARIOS_ANOTACIONES"
    
    Dim db  As DAO.Database
    Dim rel As DAO.Relation
    Dim fld As DAO.Field
    Dim listaUsuarios As String
    
    Set db = CurrentDb
    
    On Error GoTo ErrControl
    
    ' === 0. Limpieza previa de tablas *_OLD (opcional) ===
    Call EliminarTablasOld(db)
    
    ' === 1. Copias de seguridad ===
    db.Execute "SELECT * INTO T_ANOTACIONES_OLD FROM T_ANOTACIONES;", dbFailOnError
    db.Execute "SELECT * INTO T_ANOTACIONES_VALID_OLD FROM T_ANOTACIONES_VALID;", dbFailOnError
    
    ' === 2. Normalizar el usuario «3» -> «0003» ===
    db.Execute "UPDATE T_ANOTACIONES SET Idusuario='0003' WHERE Idusuario='3';", dbFailOnError
    
    ' === 3. Eliminar registros de usuarios a depurar ===
    listaUsuarios = "'carraiza','14859','14720','18287','14550','14902'"
    
    ' 3A) Primero, sus anotaciones de validación (si existen)
    db.Execute _
        "DELETE T_ANOTACIONES_VALID.* " & _
        "FROM T_ANOTACIONES_VALID " & _
        "INNER JOIN T_ANOTACIONES " & _
        "  ON T_ANOTACIONES_VALID.IdAnot = T_ANOTACIONES.IdAnot " & _
        "WHERE T_ANOTACIONES.Idusuario IN (" & listaUsuarios & ");", _
        dbFailOnError
    
    ' 3B) Después, las anotaciones principales
    db.Execute "DELETE FROM T_ANOTACIONES WHERE Idusuario IN (" & listaUsuarios & ");", dbFailOnError
    
    ' === 4. Crear (o recrear) la relación 1:N con RI ===
    ' Eliminamos previamente si existe
    On Error Resume Next
    db.Relations.Delete REL_NAME
    On Error GoTo ErrControl
    
    Set rel = db.CreateRelation(REL_NAME, "T_USUARIOS", "T_ANOTACIONES", _
                                dbRelationUpdateCascade + dbRelationDeleteCascade)
    
    Set fld = rel.CreateField("IdUsuario")   'Campo padre
    fld.ForeignName = "Idusuario"            'Campo hijo (ojo a la mayúscula/minúscula)
    rel.Fields.Append fld
    
    db.Relations.Append rel
    
    ' === 5. Limpieza final de tablas *_OLD (dejar comentado si prefieres conservarlas) ===
    Call EliminarTablasOld(db)
    
    MsgBox "Migración completada correctamente.", vbInformation
    
Salida:
    Set fld = Nothing
    Set rel = Nothing
    Set db  = Nothing
    Exit Sub
    
ErrControl:
    MsgBox "Error " & Err.Number & ": " & Err.Description, vbCritical
    Resume Salida
End Sub
